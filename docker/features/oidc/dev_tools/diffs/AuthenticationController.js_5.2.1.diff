--- original/AuthenticationController.js_5.2.1	2024-12-08 16:44:40.967033910 +0000
+++ ../services/web/app/src/Features/Authentication/AuthenticationController.js_5.2.1	2024-12-08 16:02:12.465592480 +0000
@@ -9,6 +9,8 @@
 const Settings = require('@overleaf/settings')
 const basicAuth = require('basic-auth')
 const tsscmp = require('tsscmp')
+const {User} = require("../../models/User");
+const UserCreator = require("../User/UserCreator");
 const UserHandler = require('../User/UserHandler')
 const UserSessionsManager = require('../User/UserSessionsManager')
 const Analytics = require('../Analytics/AnalyticsManager')
@@ -600,6 +602,65 @@
       delete req.session.postLoginRedirect
     }
   },
+
+  oidcLogin(req, res, next) {
+    return passport.authenticate('openidconnect')(req, res, next)
+  },
+
+  oidcLoginCallback(req, res, next) {
+    return passport.authenticate('openidconnect',
+        {failureRedirect: '/login', failureMessage: true}, function (err, user) {
+          if (err) {
+            return next(err)
+          }
+          AuthenticationController.finishLogin(user, req, res, next)
+        }
+    )(req, res, next)
+  },
+
+  verifyOpenIDConnect(issuer, profile, callback) {
+      User.findOne({oidcUID: profile.id}).then(user => {
+        if (!user) {
+          UserCreator.createNewUser({
+            holdingAccount: false,
+            email: profile.emails[0].value,
+            first_name: profile.name?.givenName || "",
+            last_name: profile.name?.familyName || "",
+            oidcUID: profile.id,
+            oidcUsername: profile.username,
+          }, (err, user) => {
+            if(err) {
+              return callback(err);
+            }
+            return callback(null, user);
+          })
+        } else {
+          user.first_name = profile.name?.givenName || "";
+          user.last_name = profile.name?.familyName || "";
+          user.oidcUsername = profile.username;
+          if (user.email != profile.emails[0].value) {
+            user.email = profile.emails[0].value;
+
+            const reversedHostname = user.email.split('@')[1].split('').reverse().join('')
+            const emailData = {
+              email: user.email,
+              createdAt: new Date(),
+              reversedHostname,
+            }
+            user.emails = [emailData]
+          }
+
+          user.save().catch(error => {
+            return callback(error);
+          }).then(user => {
+            return callback(null, user);
+          })
+        }
+      }
+    ).catch(error => {
+      return callback(error);
+    })
+  }
 }
 
 function _afterLoginSessionSetup(req, user, callback) {
